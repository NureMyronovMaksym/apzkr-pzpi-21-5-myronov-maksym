Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Програмна система для автоматизації секонд хендів»


Студент гр. ПЗПІ-21-5		 __________________ Миронов М. В.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис)
Роботу захищено «__»_________2024 р.
з оцінкою _________________________

Комісія: 				__________________ доц. Лещинський В.О.
(підпис)
___________________ доц. Лещинська І.О.
(підпис)
_________________ ст.викл. Сокорчук І.П.
(підпис)



Харків, 2024 р.
_________Харківський національний університет радіоелектроніки______

Факультет     комп’ютерних наук     Кафедра       програмної інженерії____   Спеціальність       121 – Інженерія програмного забезпечення __________
Курс                      3                      Семестр                               6____________________
Навчальна дисципліна Ахітектура програмного забезпечення___________

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

__________________Миронову Максиму Володимировичу_____________
1. Тема роботи: «Програмна система для автоматизації секонд хенду».
2. Термін узгодження завдання курсової роботи « 18 » березня    2024 р.
3. Термін здачі закінченої роботи « 24 » червня 2024 р.
4. Вихідні дані до проекту: В програмній системі передбачити: реєстрацію та авторизацію адміністраторів; адміністрація закладів матиме можливість додати річ зі всіма її параметрами; для автозповнення опису речі буде використаний Google Vision; відвідувачі системи матимуть можливість покупки речей; адмінстрація зможе переглядати статус інвентаря; у якості IoT в свою чергу будуть виступати RFID теги, на яких буду зберігатися поточний статус інвентаря; можливість монетизації буде залежати від кількості заказчиків; докладніше про вхідні дані до проекту наведено у Vision and Scope.
5. Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки__
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси).
 UML діаграма розгортання (Deployment Diagram), UML діаграма прецедентів (Use Case Diagram), ER-модель даних (Entity–Relationship Model), UML діаграма діяльності (Activity Diagram), UML діаграма компонент (Component Diagram).
КАЛЕНДАРНИЙ ПЛАН

№	Основні етапи виконання проєкту
в рамках лабораторних робіт	Термін виконання
етапів	Примітка
1	Описати  проєкт у форматі Vision & Scope	06.04.2024
2	Розробити серверну / back-end частину  програмної системи.
	20.04.2024
3	Розробити програмне забезпечення для  IoT пристрій. 	04.05.2024
4	Розробити клієнтську / front-end частину програмної системи.	18.05.2024
5	Розробити мобільний програмний  застосунок для Android мобільної платформи.	01.06.2024
Дата видачі теми проєкту « 18 » березня 2024 р.

Керівник							 ст. викл. Сокорчук І.П.
(підпис)

Завдання прийняв до виконання
ст.гр. ПЗПІІ-21-5 							    Миронов М. В.
 (підпис)


РЕФЕРАТ


Пояснювальна записка: 54 сторінки, 6 розділи, 22 рисунки, 6 джерел, 6 додаток.
КОРИСТУВАЧ, БАЗА ДАНИХ, СИСТЕМА АВТОМАТИЗАЦІЇ ВІДСТЕЖЕННЯ ТОВАРІВ, СЕКОНДХЕНД, ПАКУНОК, АРХІТЕКТУРА, SPRING BOOT, REACT, SPRING SECURITY.
Програмна система буде мати низку функцій для серверної частини, клієнтської частини, мобільного застосунку та IoT девайсу.
Для серверної частини буде реалізовано такі функції, як реєстрація та авторизація адміністраторів у системі, забезпечення захисту даних та хешування паролів. Система також дозволить додавати, редагувати та видаляти зображення і опис речей, використовуючи Google Vision API для автозаповнення опису товарів. Крім того, буде інтегровано Stripe API для здійснення купівлі речей, а також створено API для IoT, яке забезпечить передачу статусу інвентаря. Серверна частина буде реалізована
Клієнтська частина надасть адміністраторам відповідну форму для авторизації та можливість вибору мови інтерфейсу через функцію локалізації. Інтерфейс також буде зручним для додавання товарів до кошика та їх купівлі, а користувачі зможуть сортувати речі за певними категоріями.
Мобільний застосунок розробляється для адміністрації і дозволить відстежувати статус інвентаря та додавати товари.
ІоТ пристрій буде відповідати за передачу статусу інвентаря в систему.


ЗМІСТ


ВСТУП	7
1 ВИМОГИ ДО БІЗНЕСУ	8
1.1 Передумови	8
1.2 Бізнес можливості	8
1.3 Бізнес-цілі та критерії успіху	9
1.4 Потреби клієнтів або ринку	10
1.5 Бізнес-ризики	11
2 КОНЦЕПЦІЯ РІШЕННЯ	12
2.1 Окреслення концепції	12
2.2 Головна функціональність	12
2.3 Припущення та винятки	13
3 РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ	14
3.1 Рамки первинного випуску	14
3.2 Рамки наступних випусків	14
3.3 Ліміти та винятки	15
4 БІЗНЕС КОНТЕКСТ	16
4.1 Профілі зацікавлених сторін	16
4.2 Пріорітети проекту	17
4.3 Робоче середовище	18
5 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ	19
5.1 Моделювання програмної системи	19
5.2 Технології та архітектурні рішення	20
5.3 Бізнес логіка	20
5.4 Проєктування баз данних	22
5.5 REST специфікація	22
6 ОПИС РОЗУМНОГО ПРИСТРОЮ	24
6.1 Архітектура системи	24
6.2 Бізнес логіка	24
6.3 Діаграма прецедентів	25
7 РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ	27
7.1 Архітектура системи	27
7.2 Бізнес логіка	28
7.3 Діаграма прецедентів	29
7.4 Діаграма пакетів	30
ВИСНОВКИ	32
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ	34
ДОДАТОК А	35
ДОДАТОК Б	36
ДОДАТОК В	37
ДОДАТОК Г	38


ВСТУП


Основна мета цього проекту полягає у створенні програмної системи, яка дозволить автоматизувати процеси управління та обліку в магазинах секонд-хенду, покращуючи їх ефективність та зручність для користувачів. Система передбачає функції реєстрації та авторизації адміністраторів, управління інвентарем за допомогою технології RFID, автоматизацію опису товарів за допомогою Google Vision API, а також можливість онлайн-покупок для відвідувачів.
Важливими аспектами проекту є розробка серверної, клієнтської та мобільної частин системи, інтеграція IoT-пристроїв для відстеження статусу інвентарю, а також забезпечення високого рівня безпеки даних. Проект має на меті не тільки підвищити продуктивність роботи магазинів, але й забезпечити прозорість та зручність процесу купівлі для споживачів.
Цей проект є актуальним у зв’язку зі зростаючим попитом на вживані товари та необхідністю підвищення рівня обслуговування у цій сфері. Автоматизація процесів дозволить значно скоротити витрати часу на управління інвентарем та покращити користувацький досвід, що, в свою чергу, сприятиме збільшенню лояльності клієнтів та конкурентоспроможності магазинів секонд-хенду на ринку.


1	ВИМОГИ ДО БІЗНЕСУ
1.1.	Передумови


У нинішню цифрову епоху індустрія секонд-хендів переживає зсув до більш нового, більш технологічно рівня. Створення програмного забезпечення для управління та оптимізації робочого процесу в секонд-хендах стає вирішальним компонентом успіху бізнесу в цьому секторі. Із зростанням обізнаності споживачів щодо сталого розвитку та вимог до якості, швидкості обслуговування та прозорості процесу купівлі зростає потреба в ефективному та надійному управлінні діяльністю магазинів секонд-хенду. Власники прагнуть покращити не лише якість обслуговування та обізнаність клієнтів про продукти, але й ефективний контроль над управлінням інвентарем.
Наш проект «SecondHand Sync» вирішує ці проблеми, пропонуючи адміністраторам магазину можливість ефективно розподіляти ресурси та час, підвищуючи обізнаність клієнтів про історію та наявність товару. Водночас проект відповідає сучасним тенденціям розвитку ринку, підвищуючи конкурентоспроможність магазинів секонд-хенду.


1.2.	Бізнес-можливості


Зростання популярності та попиту на вживані товари вимагає покращення якості обслуговування та ефективності управління в секонд-хендах. Сучасний бізнес цінує прозорість, а система програмного забезпечення, яка дозволяє клієнтам бути більш поінформованими та безпосередньо керувати їхньою взаємодією з секонд-хендами, може вирішити багато проблем, пов’язаних із покращенням якості послуг. Ця система може допомогти керувати процесами інвентаризації, відстежувати якість товарів і забезпечувати видимість як для власників магазинів, так і для клієнтів. Це сприяє ефективному контролю ресурсів, дозволяючи зменшити витрати та оптимізувати прибутковість.
На ринку на даний момент існують системи «Skynum» та «usu», що надає схожі послуги у цій сфері, але після детального її аналізу було визначено, що ці системи не відповідають усім потребам секонд-хендів і є занадто складними в користуванні, в той час як нова система розробляється з фокусом на спрощення корстивання, завдяки чому буде забезпечено задоволення клієнтів та легкий менеджмент товарів для адміністрації.
Модель монетизації включатиме різні підписки, вартість яких буде розрахована на основі товарообігу на місяць і магазинів, які використовують систему, пропонуючи пробний період для початкового досвіду користувача. Це відкриває можливості для розширення бізнесу, покращення взаємодії з клієнтами та підвищення конкурентоспроможності на ринку для магазинів секонд-хенду.


1.3.	Бізнес-цілі та критерії успіху


Націленість на досягнення бізнес-цілей та критерії успіху у відношенні програмної системи для автоматизації секонд-хенду може бути наступною:
Програмна система має на меті:
BO-1: Завоювати понад 30% ринку систем автоматизації секонд-хендів протягом перших 2 років.
BO-2: Забезпечення розширення користувацької бази на понад 50 секонд-хендів протягом двох років.
BO-3: Залучення фінансування в розмірі $50,000 для подальшого розвитку системи протягом перших 12 місяців.
BO-4: Встановіть партнерські відносини принаймні з 5 великими компаніями доставки для оптимізації логістики протягом перших 18 місяців.
SC-1: Зниження операційних витрат магазинів-учасників на 30% за рахунок підвищення ефективності системи протягом двох років.
SC-2: Збільште товарооборотність на 20% для секонд-хендів протягом першого року використання систем
SC-3: За перший рік отримати більше 75% позитивних відгуків.
SC-4: Підтримуйте безвідмовну роботу системи на 99,9% і забезпечуйте відповідність вимогам щодо безпеки даних, що підтверджено квартальними перевірками безпеки.


1.4.	Потреби клієнтів або ринку


Програмна система для автоматизації секондхендів відповідає наступним потребам та вимогам ринку в цій галузі:
	Надання можливості легкої каталогізації предметів із автоматизованими описами через штучний інтелект.
	Забезпечення зручного та інтуїтивного інтерфейсу для користувачів.
	Забезпечення RFID-відстеження для інвентаризації.
	Забезпечити високий рівень безпеки та конфіденційності даних користувачів.
Зважаючи на ці потреби, програмна система відповідає вимогам власників секонд-хендів, які прагнуть задовільнити потреби клієнта, підвищити продуктивність працівників та забезпечити високий стандарт обслуговування в цій галузі.


1.5.	Бізнес-ризики


При розробці програмної системи необхідно враховувати різноманітні бізнес-ризики.
Ризик конкуренції. Можлива поява сильних конкурентів на ринку, які також пропонують програмні рішення для  секонд-хендів, і вже мають велику клієнтську базу.
Ризик технічних неполадок. Наявність можливих системних збоїв, які можуть спричинити перерву у наданні послуг та негативно вплинути на репутацію продукту.
Ризик фінансових зобов'язань. Збільшення витрат на підтримку програмної системи та втрата корпоративних клієнтів може створити фінансові труднощі.
Ризик втрати користувачів. Низька придатність продукту або неякісна підтримка може спричинити втрату клієнтів та погіршення репутації.
Усунення цих ризиків вимагає стратегічного планування, надійних заходів безпеки, надійної технічної інфраструктури, фінансового менеджменту та зосередженості на задоволенні клієнтів і якості продукції.


2	КОНЦЕПЦІЯ РІШЕННЯ (VISION OF THE SOLUTION)
2.1.	Окреслення концепції (Vision Statement)


Основною метою цього проекту є створення програмної системи для автоматизації управління магазинами вживаних речей і оптимізації процесів інвентаризації та продажу. Ця система, розроблена для того, щоб надати магазинам секонд-хенду управління запасами в реальному часі, взаємодію з клієнтами та відстеження продажів, спрямована на підвищення ефективності роботи та обслуговування клієнтів. Він створений для власників магазинів секонд-хенду, які хочуть модернізувати свої стратегії відстеження та продажу.
 Програмне забезпечення зосереджено на зручних і надійних рішеннях для підвищення продуктивності та робочих процесів, пропонуючи оптимальний досвід роботи як для персоналу, так і для клієнтів.


2.2.	 Головна функціональність (Major features)


MF-1: Звичайному користовачу доступний перегляд усіх товарів секонд-ходу з описом та з різними варіантами сортування.
MF-2: Звичайний користувач зможе придбати товар.
MF-3: Для адміністраторів системи доступна адміністративна панель для завантаження нових речей з автоматизованими описами через штучний інтелект.
MF-4: Для адміністраторів доступне відстеження інвентаря за допомогою RFID.


2.3.	Припущення та залежності (Assumptions and Dependencies)


Припущення:
– передбачається, що працівники будуть користуватится персональнми смартфонами, які вони будуть використовувати для вигрузки речей на платформу та відстежування локацію товару;
– припускається, що існує доступ до мережі Wi-Fi для використовування сервісу.
Залежності:
 – залежність від доступу до інфраструктури Wi-Fi технології для використовування сервісу.


3	SCOPE AND LIMITATIONS
3.1.	Рамки первинного випуску (Scope of Initial Release)


Перша версія програмної системи буде мати низку функцій для серверної частини, клієнтської частини, мобільного застосунку та ІоТ девайсу.
Серверна частина: – реєстрація та авторизація адмінів в системі;
– забезпечення захисту даних, хешування паролей;
– додавання, редагування та видалення зображення та опису речі;
– Google Vision API для автозаповнення опису товару;
– Stripe API для змоги купівлі речей;
– API для IoT для передавання статусу інвентаря;
Клієнтська частина:
– надання відповідной форми для адміна для авторизації;
– локалізація (можливість обрати мову інтерфейсу);
– надання зручного інтерфейсу для додання в кошик та купівлі товарів;
– сортування речей за певними категоріями;
Мобільний застосунок розроблюється для адміністрації:
– відстежування статусу інвентаря;
– додавання товару;
ІоТ пристрій:
– статус інвентаря;


3.2.	 Рамки наступних випусків (Scope of Subsequent Releases)


У наступних релізах сервісу можна буде виділити наступну функціональність:
F-1: Окрема функція прорахунку бюджету, зарплат та прогнозу продаж для адміністрації.
F-2: Розширені інструменти залучення клієнтів, наприклад персоналізовані рекомендації на основі історії покупок і вподобань.
F-3: Інтеграція з платформами соціальних мереж, щоб дозволити користувачам ділитися своїми покупками та досвідом, підвищуючи впізнаваність бренду.
F-4: Розширені інструменти управління запасами за допомогою штучного інтелекту для прогнозування потреб у запасах на основі тенденцій продажів і сезонності.


3.3.	 Limitations and Exclusions


Проектування системи передбачає наступні обмеження:
– відсутність можливості користуватися додатком без наявності доступу до інтернету;
– робота мобільного додатку може не підтримувати певні типи мобільних пристроїв;
– сервіс буде підтримувати лише українську та англійську мови;


4	BUSINESS CONTEXT
4.1.	 Stakeholder Profiles


Таблиця 1 – Профілі зацікавлених сторін
Зацікавлена сторона	Основна цінність	Позиції	Основні інтереси	Обмеження
Адміністрація	Продуктивність співробітників, відповідність вимогам і управління робочою силою	Зацікавленність впровадження системи для кращого управління персоналом	Ефективність співробітників, відповідність вимогам, звітність	Конфіденці йність даних, відповідність вимогам
Власник	Стратегічні цілі компанії, економічна ефективність, продуктивність	Впровадження системи підтримки для досягнення стратегічних цілей	Підвищення продуктивності, економічна ефективність	Узгодження зі стратегічни ми цілями


4.2.	Project Priorities


Таблиця 2 – Пріоритети проєкту
Розміри	Найважливіші цілі (мета)	Обмеження (ліміти)	Ступінь свободи (допустимий діапазон)
План робіт	Версія 1 має бути випущена до 01.06.2024		Кожна з контрольних точок повинна включати в себе виконання кожної окремої функціональної частини
Функціональність	Система виконує основні функції для задоволення потреб користувачів	Обмежений час на розробку рішення	95% функціоналу має працювати на релізі 1.0
Якість	Код програмного забезпечення має відповідати всім офіційним стандартам, бути вільним від відкритих вразливостей 	Обмежений час на розробку та тестування	Може мати некритичні помилки, які не впливають на роботу системи глобально

Персонал		Максимальний розмір команди - 1 розробник	Кількість учасників команди не може змінюватися впродовж роботи над проектом
Ціна	Придбання IoT пристрою	Максимальний бюджет, який може бути витрачений на придбання IoT пристрою, а саме RFID тегів - 100$	Допустимо перевищити бюджет на 20%
4.3.	Operating environment


Користувачі можуть отримати доступ до системи, якщо вони мають Android пристрій з доступом до Інтернету або ноутбук/комп’ютер з доступом до інтернету через веб-браузер. Програмна частина працюватиме у всіх сучасних браузерах.
Усі персональні дані будуть захищені за допомогою попереднього шифрування. Підключення до серверу буде за допомогою протоколу HTTPS.
Авторизація буде базуватися на основі використання JWT-токену.
Технології для серверу: Spring Boot 3.0, PostgreSQL.
Технології для мобільного клієнту: Java.
Технології для сайту: React 18.
Технології для Smart Device пристрою: Arduino IDE.


5	РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
5.1.	Моделювання програмної системи


У системи є два види користувачів: адміністратори та робітники. Окремим користувачем можна вважати пристрій. Адміністратори мають широкий спектр можливостей. Вони відповідальні за адміністрування системою, включаючи додавання нових користувачів, та переконані в правильності роботи системи. До задач адмінстраторів також відноситься додавання локацій для подальшого використання для відмітки місця знаходження відповідної посилки, які адміністратор потім може переглянути, з відповідними речами з посилки, які будуть завантажені робітниками.
Робітники мають доступ до веб та мобільного застосунку. Вони мають можливість генерування опису завантаженого зображення відповідної речі за допомогою Google Vision API, відмітки її статусу продажу та подальшої взаємодії. Також до їх задач відноситься трекінг посилки, відмітки знаходження та відповідного статусу посилки. Користувач має можливість підключити розумний пристрій до системи, данні з якого записуються в базу данних. Також отримання данних про подальше транспортування в контейнері входить до можливостей робітників.
	Мобільний застосунок призначений для робітників задля прискореної взаємодії з менеджментом посилок, включаючи її відправку, пересилку, прийняття.
	Робітники за допомогою реалізованого програманого коду на розумному пристрої можути вираховувати оптиміальну варіацію запаковування посилок для подальшого транспортування. Для загального розуміння системи була створена діаграма прецедентів (Додаток А).


5.2.	Технології та архітектурні рішення


Розуміючи, що у сучасній веб-розробці важливо вибрати правильні технології та архітектурні рішення, щоб забезпечити масштабованість, безпеку та ефективність. Для реалізації веб-додатку я обрав Spring Boot 3 з використанням Spring Security, Spring Data JPA, PostgreSQL, Liquibase і REST API.
Spring Boot 3 є ядром моєї програми, що забезпечує швидкий  і надійний запуск і налаштування проекту. Для забезпечення безпеки програми використовувася Spring Security. Автентифікація та авторизація реалізована за допомогою JWT (JSON Web Tokens), вони дозволяють керувати  ролями та правами доступу для різних типів користувачів. Взаємодія з базою даних відбувається за допомогою Spring Data JPA, що пропонує просту роботу з базами даних через репозиторії. Для зберігання даних використовувався PostgreSQL, що виділяється своює надійністю. Для контролю версій бази даних був обраний Liquibase, що пропонує автоматичне оновлення схем баз данних під час розгортання та зберігання історії змін для їх відстеження.
Веб-додаток забезпечує функціональність через REST API. HTTP запити викорустовуються для взаємодії з мобільним застосунком та IoT пристроєм (див. Додаток Б). Щодо архітекткрного патерну бува обраний MVC (див. Додаток В), який дозволяє чіткий розподіл логіки програми між моделлю, контролером і представленням, просте тестування та підтримки завдяки модульності та забезпечення масштабованості програми за рахунок чіткої структуризації компонентів. Математичні методи були використані при обробрці данних, які надсилає Google Vision API.


5.3.	Бізнес логіка


Програмна система пропонує широкий функіонал, осоновна задача якого в автоматизації процесу доставки секонд хенд речей, насамперед через переведення усього процесу від відправлення до продажу речей в одну електрону систему. Використання Google Vision API, смарт девайсу є невід’ємною частиною усього процесу.
Основний функціонал включає:
	Функціонал авторизації з використанням JWT токенів. У пакеті config програмної системи можна знайти відповідну реалізацію;
	Функціонал додавання нової локації адміном;
	Функціонал управління локаціями, так, наприклад, видалення та редагування, адміном;
	Функціонал отримання відповідної речі за допомогою Google Vision API робітником;
	Функціонал управління речами, так, наприклад, видалення, робітником;
	Функціонал управління речами, так, наприклад, редагування робітником;
	Функціонал перегляду усіх завантажених речей адміном та робітником;
	Функціонал оновлення статусу продажу речі робітником;
	Функціонал створення нової посилки адміном;
	Функціонал редагування данних про стан та статус посилки робітником;
	Функціонал підключення IoT пристрою для відстеження габаритів та стану посилок робітником;
Розробка велася з дотриманням принципів Clean Code, стандартного форматування, конвенцій Spring та з акцентом на безпеку.


5.4.	Проєктування бази данних


	Була розроблена схема бази даних, з якої можна побачити відповідні  зв'язки між таблицями та їхню відповідну структуру (Див. Додаток Г).
	User і Package: Між цими таблицями існує зв'язок "багато до одного" (Many-to-One). Користувач може бути пов'язаний з одним пакетом через поле package_id. Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
	Item і Package: Між цими таблицями також існує зв'язок "багато до одного" (Many-to-One). Кожен предмет пов'язаний з одним пакетом через поле package_id.
	Package і Location: Між цими таблицями існує зв'язок "багато до одного" (Many-to-One). Кожен пакет пов'язаний з однією локацією через поле location_id.


5.5.	Специфікація REST


	REST API в даному проекті складається із 31 кінцевої точки. Кожний ендпоінт відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 3)
Таблиця 3 – Специфікація REST API
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Адміністратор	/api/users/register	POST	Реєстрація користувача
Всі	/api/users/login	POST	Авторизація користувача
Адміністратор	/api/package-manager	POST	Додавання нової посилки
Працівник	/api/package-manager/{packageId}/setStatus	PUT	Оновлення статусу посилки
Працівник, адміністратор	/api/package-manager	GET	Отримання всіх посилок
Адміністратор	/api/package-manager/{packageId}	DELETE	Видалення посилки
Адміністратор	/api/location-manager/setLocation	POST	Додавання локації
Адміністратор	/api/location-manager	PUT	Оновлення локації
Адміністратор	/api/location-manager	GET	Отримання всіх локацій
Адміністратор	/api/location-manager/{locationId}	DELETE	Видалення локації

Працівник	/api/item-manager/{packageId}/setItem	POST	Додавання нової речі
Працівник, адміністратор	/api/item-manager/getItems	GET	Отримання всіх речей
Працівник	/api/item-manager
/{itemId}/setSold	PUT	Оновлення статусу продажу речі
Адміністратор	/api/iot-service/package	POST	Отримання данних з IoT


6	РОЗРОБКА РОЗУМНОГО ПРИСТРОЮ
6.1.	Архітектура системи


Система для автоматизаціїї секонд хендів складається з розумного пристрою, що збирає дані про габарити пакунків і температуру за допомогою ультразвукових і температурних датчиків. Сервер Flask приймає ці дані від Arduino, обробляє їх, аутентифікує користувачів за допомогою JWT та передає оброблену інформацію на сервер Spring Boot. Клієнти взаємодіють із сервером Flask для підключення до Arduino, збору даних про пакунки та обчислення місткості контейнера. Сервер Flask також забезпечує перевірку прав доступу користувачів і обробку клієнтських запитів. Сервер Spring Boot приймає дані від Flask, зберігає їх і обробляє для подальшого використання. Користувачі можуть отримати результати обробки, такі як кількість пакунків, що можуть поміститися в контейнер, і відсоток заповнення.


Рисунок 1 – Розумний пристрій


6.2.	Бізнес логіка
Бізнес логіка системи для автоматизації секонд хендів передбачає збір даних про габарити та температуру пакунків для оптимізації простору в контейнерах.
Сервер Flask аутентифікує користувачів, приймає дані від пристрою Arduino та відправляє їх на сервер Spring Boot для подальшої обробки. Spring Boot зберігає ці дані та аналізує їх, забезпечуючи точний розрахунок об'єму пакунків і моніторинг температури. Користувачі можуть запитувати розрахунок місткості контейнера, щоб визначити оптимальне розміщення пакунків і ефективно використовувати доступний простір. Система також виявляє аномалії, такі як перевищення температури або занадто великі пакунки, та інформує користувачів про необхідність коригування. Це дозволяє забезпечити безпеку та ефективність процесів завантаження і транспортування.


6.3.	Діаграма прецедентів


Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (рис. 2).


Рисунок 2 – Діаграма прецедентів
Система включає двох користувачів: адміна та робітника, що конфігурує девайс та отримає данні для транспортування.


7	РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ
7.1.	Архітектура системи


React був обраний як основний фреймворк для розробки клієнтської частини системи з кількох причин: компонентна архітектура, що дозволяє створювати багаторазово використовувані компоненти інтерфейсу користувача, що полегшує керування та підтримку коду. Також віртуальний DOM від React покращує продуктивність, ефективно оновлюючи та відображаючи лише компоненти, які змінилися.
Використання REST API і HttpClient у React забезпечує простий і ефективний зв’язок із стороною сервера для отримання та обробки даних. RESTful API надає стандартизований спосіб доступу до веб-ресурсів і керування ними за допомогою методів HTTP. Такі інструменти, як Axios у React, спрощують надсилання HTTP-запитів і обробку відповідей,
Для інтернаціоналізації бува обраний механізм i18n, що має такі переваги, як додавання нових мов, адаптація інтерфейсу та кодування UTF-8, що забезпечує правильну обробку та відображення символів кількох мов, необхідних для підтримки міжнародних користувачів.
Задля безпеки були реалізовані токени-носії JWT, що покращують безпеку та контролюють доступ до захищених ресурсів за допомогою автентифікації, JWT використовуються для перевірки ідентичності користувачів, гарантуючи, що лише автентифіковані користувачі можуть отримати доступ до певних ендпоінтів, та авторизації, токени носія можуть включати ролі та дозволи користувача, забезпечуючи детальний контроль над доступом до ресурсів.
Навігація була реалізована за допомогою React Router, він полегшує навігацію між різними сторінками програми за допомогою визначення маршрутів, маршрути визначаються у файлі маршрутизації, зіставляючи URL-адреси з компонентами.
Архітектура зовнішньої системи, розроблена в React, використовує сильні сторони фреймворку для створення надійної, зручної та ефективної веб-частини програми. Дотримуючись сучасних методів розробки та інструментів, він забезпечує безперебійний зв’язок із серверною частиною, підтримує інтернаціоналізацію та підтримує високі стандарти безпеки.


7.2.	Бізнес логіка


Основний функціонал системи надає можливість автоматизації товарообігу речей від їх відсилання до відгрузки та розміщення у відповідному секондхенді:
	Усі користувачі можуть увійти в систему, надавши свої облікові дані, отримавши маркер JWT після успішної автентифікації.
	Адміністратор може додавати нові пакунки в систему, вказуючи такі деталі, як ідентифікатор пакунка, опис та інформацію про одержувача.
	Адміністратор може видалити пакет із системи, використовуючи його ідентифікатор пакета.
	Адміністратор може додавати нові місцезнаходження до системи, вказуючи такі деталі місцезнаходження, як ім’я та адреса.
	Адміністратор може оновити наявні відомості про місцезнаходження.
	Адміністратор може отримати список усіх місць у системі.
	Адміністратор може видалити місцезнаходження, використовуючи його ідентифікатор.
	Адміністратор може переглядати всі пакети в системі.
	Адміністратор може додавати елементи в певний пакет.
	Адміністратор може отримати список усіх елементів у системі.
	Адміністратор може оновити статус товару, щоб вказати, що він проданий.
	Адміністратор може зареєструвати нових користувачів, надавши необхідні дані, такі як ім’я користувача, пароль і роль.
	Адміністратор може отримувати та обробляти дані з пристроїв IoT, пов’язані з пакетами.
	Працівники можуть оновлювати статус посилок, наприклад позначати їх як доставлені або в дорозі.
	Працівники можуть переглядати список усіх пакетів у системі.
	Працівники можуть додавати нові елементи до певних пакетів.
	Працівники можуть переглядати всі елементи в системі.
	Працівники можуть оновлювати статус товарів, позначаючи їх як продані.


7.3.	Діаграма прецедентів


Ця діаграма прецедентів була створена для визначення зовнішніх функцій системи, включаючи реєстрацію, авторизацію, додавання, редагування та видалення різних об’єктів (User, Location, Item, Package, Sensor). Це спрощує спілкування між розробниками, дизайнерами та тестувальниками, дозволяючи їм краще розуміти, які компоненти та служби потрібні для реалізації певних дій. Діаграма також допомагає планувати та керувати проектом, оцінювати складність завдань та відстежувати прогрес. Використання модульної архітектури забезпечує ремонтопридатність і повторне використання коду, зокрема завдяки AxiosHttpService для запитів і i18n для локалізації.


Рисунок 3 – Діаграма прецедентів


7.4.	Діаграма пакетів


Діаграма пакетів була створена для зображення структури та залежності компонентів. Він показує, як взаємопов’язані різні модулі, такі як i18n, Locales, Forms, Axios, EntityPages, Views і Components. Стрілки вказують на залежності або потоки даних між цими модулями, що свідчить про те, що EntityPages покладається на Axios для отримання даних, тоді як інші компоненти, такі як Views і Components, взаємодіють з EntityPages і один з одним, а i18n і Locales обробляють функції інтернаціоналізації та локалізації.

Рисунок 4 – Діаграма пакетів


ВИСНОВКИ


У процесі виконання даної курсової роботи була розроблена програмна система для автоматизації управління магазинами секонд-хенду. Основна мета проекту полягала у створенні системи, що оптимізує процеси інвентаризації та продажу, підвищуючи ефективність роботи магазинів та покращуючи обслуговування клієнтів.
Під час розробки курсової роботи були використані сучасні технології. Система розроблена на основі Spring Boot 3, що забезпечує швидкий запуск і надійне налаштування проекту. Для забезпечення безпеки використовувались Spring Security та JWT, що гарантують надійну автентифікацію та авторизацію користувачів. Взаємодія з базою даних реалізована за допомогою Spring Data JPA та PostgreSQL. Використання REST API забезпечує взаємодію з мобільним застосунком та IoT пристроєм.
Щодо архітектурного рішення був обраний патерн MVC, який забезпечує чіткий розподіл логіки між моделлю, контролером і представленням, що спрощує тестування та підтримку системи. У подальших релізах планується впровадження додаткових функцій, таких як прорахунок бюджету зарплат та прогнозування продажів, що дозволить системі бути більш гнучкою та відповідати зростаючим потребам користувачів.
Розроблена система демонструє високий потенціал для підвищення ефективності управління магазинами секонд-хенду. Використання сучасних технологій та продуманих архітектурних рішень забезпечує масштабованість, безпеку та зручність використання як для адміністрації, так і для звичайних користувачів. Майбутні покращення та додаткові функції дозволять системі адаптуватися до нових вимог і викликів, що виникають у процесі її експлуатації.
Ця курсова робота показала важливість комплексного підходу до розробки програмних систем, включаючи аналіз вимог, вибір технологій, проектування архітектури та впровадження функціональності. Отримані результати свідчать про успішність проекту та можливість його подальшого розвитку та впровадження у реальних умовах.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Мартін Фаулер, "Шаблони корпоративних застосунків", Львів: Вид-во Старого Лева, 2012. Роберт С. Мартін,
2.	"Чиста архітектура: Мистецтво розробки програмного забезпечення", Харків: Фабула, 2018.
3.	Д. Норт, "BDD in Action: Behavior-Driven Development for the whole software lifecycle", Manning Publications, 2014.
4.	"Spring Boot Reference Documentation", [онлайн]. URL: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/ (дата звернення: 18-травня-2024).
5.	React Documentation. URL: https://react.dev/ (дата звернення: 30-травня-2024)


ДОДАТОК А
Діаграма прецедентів

ДОДАТОК Б
Діаграма розгортання

ДОДАТОК В
Діаграма пакетів

ДОДАТОК Г
ER-діаграма





