Міністерство освіти та науки України
Харківський національний університет радіоелектроніки

Кафедра ПІ

ПОЯСНЮВАЛЬНА ЗАПИСКА
ДО КУРСОВОЇ РОБОТИ
з дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Програмна система для автоматизації секондхендів»

Виконав:
ст. гр. ПЗПІ-21-5					         Миронов М.В.

Керівник:
ст. вик. каф. ПІ						Сокорчук І.П.

Робота захищена на оцінку				        ____________

Комісія:
доц. каф. 							ПІ Лещинський В.О.
доц. каф. 						          ПІ Лещинська І.О.
ст. викл. каф. 							ПІ Сокорчук І.П.
Харків, 2024 р.
_________Харківський національний університет радіоелектроніки______

Факультет     комп’ютерних наук     Кафедра       програмної інженерії____   Спеціальність       121 – Інженерія програмного забезпечення __________
Курс                      3                      Семестр                               6____________________
Навчальна дисципліна Ахітектура програмного забезпечення___________

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

__________________Миронову Максиму Володимировичу_____________
1. Тема роботи: «Програмна система для автоматизації секонд хенду».
2. Термін узгодження завдання курсової роботи « 18 » березня    2024 р.
3. Термін здачі закінченої роботи « 24 » червня 2024 р.
4. Вихідні дані до проекту: В програмній системі передбачити: реєстрацію та авторизацію адміністраторів; адміністрація закладів матиме можливість додати річ зі всіма її параметрами; для автозповнення опису речі буде використаний Google Vision; відвідувачі системи матимуть можливість покупки речей; адмінстрація зможе переглядати статус інвентаря; у якості IoT в свою чергу будуть виступати RFID теги, на яких буду зберігатися поточний статус інвентаря; можливість монетизації буде залежати від кількості заказчиків; докладніше про вхідні дані до проекту наведено у Vision and Scope.
5. Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки__
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси).
 UML діаграма розгортання (Deployment Diagram), UML діаграма прецедентів (Use Case Diagram), ER-модель даних (Entity–Relationship Model), UML діаграма діяльності (Activity Diagram), UML діаграма компонент (Component Diagram).
КАЛЕНДАРНИЙ ПЛАН

№	Основні етапи виконання проєкту
в рамках лабораторних робіт	Термін виконання
етапів	Примітка
1	Описати  проєкт у форматі Vision & Scope	06.04.2024
2	Розробити серверну / back-end частину  програмної системи.
	20.04.2024
3	Розробити програмне забезпечення для  IoT пристрій. 	04.05.2024
4	Розробити клієнтську / front-end частину програмної системи.	18.05.2024
5	Розробити мобільний програмний  застосунок для Android мобільної платформи.	01.06.2024
Дата видачі теми проєкту « 18 » березня 2024 р.

Керівник							 ст. викл. Сокорчук І.П.
(підпис)

Завдання прийняв до виконання
ст.гр. ПЗПІІ-21-5 							    Миронов М. В.
 (підпис)



РЕФЕРАТ


Пояснювальна записка: 54 сторінки, 6 розділи, 22 рисунки, 6 джерел, 6 додаток.
БАЗА ДАНИХ, СИСТЕМА АВТОМАТИЗАЦІЇ ВІДСТЕЖЕННЯ ТОВАРІВ, СЕКОНДХЕНД, ПАКУНОК, АРХІТЕКТУРА, SPRING BOOT, REACT, SPRING SECURITY.
Програмна система буде мати низку функцій для серверної частини, клієнтської частини, мобільного застосунку та IoT девайсу.
Для серверної частини буде реалізовано такі функції, як реєстрація та авторизація адміністраторів у системі, забезпечення захисту даних та хешування паролів. Система також дозволить додавати, редагувати та видаляти зображення і опис речей, використовуючи Google Vision API для автозаповнення опису товарів. Крім того, буде інтегровано Stripe API для здійснення купівлі речей, а також створено API для IoT, яке забезпечить передачу статусу інвентаря. Серверна частина буде реалізована
Клієнтська частина надасть адміністраторам відповідну форму для авторизації та можливість вибору мови інтерфейсу через функцію локалізації. Інтерфейс також буде зручним для додавання товарів до кошика та їх купівлі, а користувачі зможуть сортувати речі за певними категоріями.
Мобільний застосунок розробляється для адміністрації і дозволить відстежувати статус інвентаря та додавати товари.
ІоТ пристрій буде відповідати за передачу статусу інвентаря в систему.

















ЗМІСТ
ВСТУП........................................................................................................... 9
1 	АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ..................................................................................... 11

















1	ВИМОГИ ДО БІЗНЕСУ
1.1.	Передумови


У нинішню цифрову епоху індустрія секонд-хендів переживає зсув до більш нового, більш технологічно рівня. Створення програмного забезпечення для управління та оптимізації робочого процесу в секонд-хендах стає вирішальним компонентом успіху бізнесу в цьому секторі. Із зростанням обізнаності споживачів щодо сталого розвитку та вимог до якості, швидкості обслуговування та прозорості процесу купівлі зростає потреба в ефективному та надійному управлінні діяльністю магазинів секонд-хенду. Власники прагнуть покращити не лише якість обслуговування та обізнаність клієнтів про продукти, але й ефективний контроль над управлінням інвентарем.
Наш проект «SecondHand Sync» вирішує ці проблеми, пропонуючи адміністраторам магазину можливість ефективно розподіляти ресурси та час, підвищуючи обізнаність клієнтів про історію та наявність товару. Водночас проект відповідає сучасним тенденціям розвитку ринку, підвищуючи конкурентоспроможність магазинів секонд-хенду.


1.2.	Бізнес-можливості


Зростання популярності та попиту на вживані товари вимагає покращення якості обслуговування та ефективності управління в секонд-хендах. Сучасний бізнес цінує прозорість, а система програмного забезпечення, яка дозволяє клієнтам бути більш поінформованими та безпосередньо керувати їхньою взаємодією з секонд-хендами, може вирішити багато проблем, пов’язаних із покращенням якості послуг. Ця система може допомогти керувати процесами інвентаризації, відстежувати якість товарів і забезпечувати видимість як для власників магазинів, так і для клієнтів. Це сприяє ефективному контролю ресурсів, дозволяючи зменшити витрати та оптимізувати прибутковість.
На ринку на даний момент існують системи «Skynum» та «usu», що надає схожі послуги у цій сфері, але після детального її аналізу було визначено, що ці системи не відповідають усім потребам секонд-хендів і є занадто складними в користуванні, в той час як нова система розробляється з фокусом на спрощення корстивання, завдяки чому буде забезпечено задоволення клієнтів та легкий менеджмент товарів для адміністрації.
Модель монетизації включатиме різні підписки, вартість яких буде розрахована на основі товарообігу на місяць і магазинів, які використовують систему, пропонуючи пробний період для початкового досвіду користувача. Це відкриває можливості для розширення бізнесу, покращення взаємодії з клієнтами та підвищення конкурентоспроможності на ринку для магазинів секонд-хенду.


1.3.	Бізнес-цілі та критерії успіху


Націленість на досягнення бізнес-цілей та критерії успіху у відношенні програмної системи для автоматизації секонд-хенду може бути наступною:
Програмна система має на меті:
BO-1: Завоювати понад 30% ринку систем автоматизації секонд-хендів протягом перших 2 років.
BO-2: Забезпечення розширення користувацької бази на понад 50 секонд-хендів протягом двох років.
BO-3: Залучення фінансування в розмірі $50,000 для подальшого розвитку системи протягом перших 12 місяців.
BO-4: Встановіть партнерські відносини принаймні з 5 великими компаніями доставки для оптимізації логістики протягом перших 18 місяців.
SC-1: Зниження операційних витрат магазинів-учасників на 30% за рахунок підвищення ефективності системи протягом двох років.
SC-2: Збільште товарооборотність на 20% для секонд-хендів протягом першого року використання систем
SC-3: За перший рік отримати більше 75% позитивних відгуків.
SC-4: Підтримуйте безвідмовну роботу системи на 99,9% і забезпечуйте відповідність вимогам щодо безпеки даних, що підтверджено квартальними перевірками безпеки.


1.4.	Потреби клієнтів або ринку


Програмна система для автоматизації секондхендів відповідає наступним потребам та вимогам ринку в цій галузі:
	Надання можливості легкої каталогізації предметів із автоматизованими описами через штучний інтелект.
	Забезпечення зручного та інтуїтивного інтерфейсу для користувачів.
	Забезпечення RFID-відстеження для інвентаризації.
	Забезпечити високий рівень безпеки та конфіденційності даних користувачів.
Зважаючи на ці потреби, програмна система відповідає вимогам власників секонд-хендів, які прагнуть задовільнити потреби клієнта, підвищити продуктивність працівників та забезпечити високий стандарт обслуговування в цій галузі.


1.5.	Бізнес-ризики


При розробці програмної системи необхідно враховувати різноманітні бізнес-ризики.
Ризик конкуренції. Можлива поява сильних конкурентів на ринку, які також пропонують програмні рішення для  секонд-хендів, і вже мають велику клієнтську базу.
Ризик технічних неполадок. Наявність можливих системних збоїв, які можуть спричинити перерву у наданні послуг та негативно вплинути на репутацію продукту.
Ризик фінансових зобов'язань. Збільшення витрат на підтримку програмної системи та втрата корпоративних клієнтів може створити фінансові труднощі.
Ризик втрати користувачів. Низька придатність продукту або неякісна підтримка може спричинити втрату клієнтів та погіршення репутації.
Усунення цих ризиків вимагає стратегічного планування, надійних заходів безпеки, надійної технічної інфраструктури, фінансового менеджменту та зосередженості на задоволенні клієнтів і якості продукції.













2	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

У системи є два види користувачів: адміністратори та робітники. Окремим користувачем можна вважати пристрій. Адміністратори мають широкий спектр можливостей. Вони відповідальні за адміністрування системою, включаючи додавання нових користувачів, та переконані в правильності роботи системи. До задач адмінстраторів також відноситься додавання локацій для подальшого використання для відмітки місця знаходження відповідної посилки, які адміністратор потім може переглянути, з відповідними речами з посилки, які будуть завантажені робітниками.
Робітники мають доступ до веб та мобільного застосунку. Вони мають можливість генерування опису завантаженого зображення відповідної речі за допомогою Google Vision API, відмітки її статусу продажу та подальшої взаємодії. Також до їх задач відноситься трекінг посилки, відмітки знаходження та відповідного статусу посилки. Користувач має можливість підключити розумний пристрій до системи, данні з якого записуються в базу данних. Також отримання данних про подальше транспортування в контейнері входить до можливостей робітників.
	Мобільний застосунок призначений для робітників задля прискореної взаємодії з менеджментом посилок, включаючи її відправку, пересилку, прийняття.
	Робітники за допомогою реалізованого програманого коду на розумному пристрої можути вираховувати оптиміальну варіацію запаковування посилок для подальшого транспортування.


3	БІЗНЕС ЛОГІКА


Програмна система пропонує широкий функіонал, осоновна задача якого в автоматизації процесу доставки секонд хенд речей, насамперед через переведення усього процесу від відправлення до продажу речей в одну електрону систему. Використання Google Vision API, смарт девайсу є невід’ємною частиною усього процесу.
Основний функціонал включає:
	Функціонал авторизації з використанням JWT токенів. У пакеті config програмної системи можна знайти відповідну реалізацію;
	Функціонал додавання нової локації адміном;
	Функціонал управління локаціями, так, наприклад, видалення та редагування, адміном;
	Функціонал отримання відповідної речі за допомогою Google Vision API робітником;
	Функціонал управління речами, так, наприклад, видалення, робітником;
	Функціонал управління речами, так, наприклад, редагування робітником;
	Функціонал перегляду усіх завантажених речей адміном та робітником;
	Функціонал оновлення статусу продажу речі робітником;
	Функціонал створення нової посилки адміном;
	Функціонал редагування данних про стан та статус посилки робітником;
	Функціонал підключення IoT пристрою для відстеження габаритів та стану посилок робітником;
Розробка велася з дотриманням принципів Clean Code, стандартного форматування, конвенцій Spring та з акцентом на безпеку.



4	ПРОЄКТУВАННЯ БАЗИ ДАНИХ


	Була розроблена схема бази даних, з якої можна побачити відповідні  зв'язки між таблицями та їхню відповідну структуру
User і Package: Між цими таблицями існує зв'язок "багато до одного" (Many-to-One). Користувач може бути пов'язаний з одним пакетом через поле package_id. Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
Item і Package: Між цими таблицями також існує зв'язок "багато до одного" (Many-to-One). Кожен предмет пов'язаний з одним пакетом через поле package_id.
Package і Location: Між цими таблицями існує зв'язок "багато до одного" (Many-to-One). Кожен пакет пов'язаний з однією локацією через поле location_id.


5	СПЕЦИФІКАЦІЯ REST


	REST API в даному проекті складається із 31 кінцевої точки. Кожний ендпоінт відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 1)


Таблиця 1 – Специфікація REST API
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Адміністратор	/api/users/register	POST	Реєстрація користувача
Всі	/api/users/login	POST	Авторизація користувача
Адміністратор	/api/package-manager	POST	Додавання нової посилки
Працівник	/api/package-manager/{packageId}/setStatus	PUT	Оновлення статусу посилки
Працівник, адміністратор	/api/package-manager	GET	Отримання всіх посилок
Адміністратор	/api/package-manager/{packageId}	DELETE	Видалення посилки
Адміністратор	/api/location-manager/setLocation	POST	Додавання локації
Адміністратор	/api/location-manager	PUT	Оновлення локації
Адміністратор	/api/location-manager	GET	Отримання всіх локацій
Адміністратор	/api/location-manager/{locationId}	DELETE	Видалення локації

Працівник	/api/item-manager/{packageId}/setItem	POST	Додавання нової речі
Працівник, адміністратор	/api/item-manager/getItems	GET	Отримання всіх речей
Працівник	/api/item-manager
/{itemId}/setSold	PUT	Оновлення статусу продажу речі
Адміністратор	/api/iot-service/package	POST	Отримання данних з IoT

 
6	АРХІТЕКТУРА СИСТЕМИ


Система для автоматизаціїї секонд хендів складається з розумного пристрою, що збирає дані про габарити пакунків і температуру за допомогою ультразвукових і температурних датчиків. Сервер Flask приймає ці дані від Arduino, обробляє їх, аутентифікує користувачів за допомогою JWT та передає оброблену інформацію на сервер Spring Boot. Клієнти взаємодіють із сервером Flask для підключення до Arduino, збору даних про пакунки та обчислення місткості контейнера. Сервер Flask також забезпечує перевірку прав доступу користувачів і обробку клієнтських запитів. Сервер Spring Boot приймає дані від Flask, зберігає їх і обробляє для подальшого використання. Користувачі можуть отримати результати обробки, такі як кількість пакунків, що можуть поміститися в контейнер, і відсоток заповнення.


Рисунок 1 – Розумний пристрій

БІЗНЕС ЛОГІКА
Бізнес логіка системи для автоматизації секонд хендів передбачає збір даних про габарити та температуру пакунків для оптимізації простору в контейнерах.
Сервер Flask аутентифікує користувачів, приймає дані від пристрою Arduino та відправляє їх на сервер Spring Boot для подальшої обробки. Spring Boot зберігає ці дані та аналізує їх, забезпечуючи точний розрахунок об'єму пакунків і моніторинг температури. Користувачі можуть запитувати розрахунок місткості контейнера, щоб визначити оптимальне розміщення пакунків і ефективно використовувати доступний простір. Система також виявляє аномалії, такі як перевищення температури або занадто великі пакунки, та інформує користувачів про необхідність коригування. Це дозволяє забезпечити безпеку та ефективність процесів завантаження і транспортування.
ДІАГРАМА ПРЕЦЕДЕНТІВ
Для розуміння ситуацій використання програмної системи була сформована
діаграма прецедентів (рис. 2).

Рисунок 2 – Діаграма прецедентів
Система включає двох користувачів: адміна та робітника, що конфігурує
девайс та отримає данні для транспортування
7	РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ

7.1.	Архітектура системи


React був обраний як основний фреймворк для розробки клієнтської частини системи з кількох причин: компонентна архітектура, що дозволяє створювати багаторазово використовувані компоненти інтерфейсу користувача, що полегшує керування та підтримку коду. Також віртуальний DOM від React покращує продуктивність, ефективно оновлюючи та відображаючи лише компоненти, які змінилися.
Використання REST API і HttpClient у React забезпечує простий і ефективний зв’язок із стороною сервера для отримання та обробки даних. RESTful API надає стандартизований спосіб доступу до веб-ресурсів і керування ними за допомогою методів HTTP. Такі інструменти, як Axios у React, спрощують надсилання HTTP-запитів і обробку відповідей,
Для інтернаціоналізації бува обраний механізм i18n, що має такі переваги, як додавання нових мов, адаптація інтерфейсу та кодування UTF-8, що забезпечує правильну обробку та відображення символів кількох мов, необхідних для підтримки міжнародних користувачів.
Задля безпеки були реалізовані токени-носії JWT, що покращують безпеку та контролюють доступ до захищених ресурсів за допомогою автентифікації, JWT використовуються для перевірки ідентичності користувачів, гарантуючи, що лише автентифіковані користувачі можуть отримати доступ до певних ендпоінтів, та авторизації, токени носія можуть включати ролі та дозволи користувача, забезпечуючи детальний контроль над доступом до ресурсів.
Навігація була реалізована за допомогою React Router, він полегшує навігацію між різними сторінками програми за допомогою визначення маршрутів, маршрути визначаються у файлі маршрутизації, зіставляючи URL-адреси з компонентами.
Архітектура зовнішньої системи, розроблена в React, використовує сильні сторони фреймворку для створення надійної, зручної та ефективної веб-частини програми. Дотримуючись сучасних методів розробки та інструментів, він забезпечує безперебійний зв’язок із серверною частиною, підтримує інтернаціоналізацію та підтримує високі стандарти безпеки.


2.1.	Бізнес логіка


Основний функціонал системи надає можливість автоматизації товарообігу речей від їх відсилання до відгрузки та розміщення у відповідному секондхенді:
	Усі користувачі можуть увійти в систему, надавши свої облікові дані, отримавши маркер JWT після успішної автентифікації.
	Адміністратор може додавати нові пакунки в систему, вказуючи такі деталі, як ідентифікатор пакунка, опис та інформацію про одержувача.
	Адміністратор може видалити пакет із системи, використовуючи його ідентифікатор пакета.
	Адміністратор може додавати нові місцезнаходження до системи, вказуючи такі деталі місцезнаходження, як ім’я та адреса.
	Адміністратор може оновити наявні відомості про місцезнаходження.
	Адміністратор може отримати список усіх місць у системі.
	Адміністратор може видалити місцезнаходження, використовуючи його ідентифікатор.
	Адміністратор може переглядати всі пакети в системі.
	Адміністратор може додавати елементи в певний пакет.
	Адміністратор може отримати список усіх елементів у системі.
	Адміністратор може оновити статус товару, щоб вказати, що він проданий.
	Адміністратор може зареєструвати нових користувачів, надавши необхідні дані, такі як ім’я користувача, пароль і роль.
	Адміністратор може отримувати та обробляти дані з пристроїв IoT, пов’язані з пакетами.
	Працівники можуть оновлювати статус посилок, наприклад позначати їх як доставлені або в дорозі.
	Працівники можуть переглядати список усіх пакетів у системі.
	Працівники можуть додавати нові елементи до певних пакетів.
	Працівники можуть переглядати всі елементи в системі.
	Працівники можуть оновлювати статус товарів, позначаючи їх як продані.


2.2.	Діаграма прецедентів


Ця діаграма прецедентів була створена для визначення зовнішніх функцій системи, включаючи реєстрацію, авторизацію, додавання, редагування та видалення різних об’єктів (User, Location, Item, Package, Sensor). Це спрощує спілкування між розробниками, дизайнерами та тестувальниками, дозволяючи їм краще розуміти, які компоненти та служби потрібні для реалізації певних дій. Діаграма також допомагає планувати та керувати проектом, оцінювати складність завдань та відстежувати прогрес. Використання модульної архітектури забезпечує ремонтопридатність і повторне використання коду, зокрема завдяки AxiosHttpService для запитів і i18n для локалізації.



2.3.	Діаграма пакетів


Діаграма пакетів була створена для зображення структури та залежності компонентів. Він показує, як взаємопов’язані різні модулі, такі як i18n, Locales, Forms, Axios, EntityPages, Views і Components. Стрілки вказують на залежності або потоки даних між цими модулями, що свідчить про те, що EntityPages покладається на Axios для отримання даних, тоді як інші компоненти, такі як Views і Components, взаємодіють з EntityPages і один з одним, а i18n і Locales обробляють функції інтернаціоналізації та локалізації.

